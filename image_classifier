#!/usr/bin/env python
# coding: utf-8

# # Using deep features to train an image classifier

# In[1]:


import turicreate


# # Load some data

# In[2]:


image_train = turicreate.SFrame('~/src/image_train_data/')
image_test = turicreate.SFrame('~/src/image_test_data/')


# # Explore this image data

# In[3]:


image_train['image'].explore()


# # Train an image classifier on raw image pixels

# In[4]:


raw_pixel_model = turicreate.logistic_classifier.create(image_train,
                                                       target = 'label',
                                                       features = ['image_array'])


# # Make predictions using simple raw pixel model

# In[5]:


image_test[0:3]['image'].explore()


# In[6]:


image_test[0:3]['label']


# In[7]:


raw_pixel_model.predict(image_test[0:3])


# # Evaluate the raw pixel model on the test data

# In[8]:


raw_pixel_model.evaluate(image_test)


# # Train image classifier using deep features

# In[9]:


len(image_train)


# In[10]:


#deep_learning_model = turicreate.load_model('imagenet_model_iter45')
#image_train['deep_features'] = deep_learning_model.extract_features(image_train)


# In[11]:


image_train


# # Given the deep features, train a logistic classifier

# In[12]:


deep_features_model = turicreate.logistic_classifier.create(image_train,
                                                           target='label',
                                                           features = ['deep_features'])


# # Apply the deep features classifier on the first few images

# In[13]:


image_test[0:3]['image'].explore()


# In[14]:


deep_features_model.predict(image_test[0:3])


# # Quantitatively evaluate deep features classifier on test data

# In[15]:


deep_features_model.evaluate(image_test)


# In[16]:


cat_one = image_test[0:1]


# In[17]:


cat_one['image'].explore()


# In[ ]:
